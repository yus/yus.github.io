let grid = [];
let nextGrid = [];
let cols = 12;
let rows = 12;
let cellSize = 10;
let gapSize = 5;
let isPlaying = true;
let speed = 10;
let frameCount = 0;
let colorMode = 'pair';
let shouldAnimate = false;
let rotationAngles = [];
let cameraState = {
    position: [0, 0, 800],
    center: [0, 0, 0],
    up: [0, 1, 0]
};
let cameraZoom = 1;

// Color dataset
const colorDataset = [
  [ 33, 24, 48, 255 ],
  [ 92, 110, 148, 255 ],
  [ 135, 244, 226, 255 ],
  [ 255, 253, 151, 255 ],
  [ 255, 181, 148, 255 ],
  [ 213, 224, 95, 255 ],
  [ 134, 138, 97, 255 ],
  [ 209, 147, 144, 255 ],
  [ 173, 75, 69, 255 ],
  [ 120, 176, 230, 255],
  [ 106, 120, 184, 255 ],
  [ 186, 191, 219, 255 ],
  [ 237, 237, 237, 255 ],
  [ 219, 211, 186, 255 ],
  [ 184, 163, 99, 255 ],
  [ 35, 41, 37, 255 ],
  [ 60, 89, 64, 255 ],
  [ 242, 164, 68, 255 ],
  [ 166, 53, 28, 255 ],
  [ 115, 47, 23, 255 ],
  [ 18, 82, 255, 255 ],
  [ 26, 137, 255, 255 ],
  [ 35, 188, 255, 255 ],
  [ 44, 235, 255, 255 ],
  [ 52, 255, 229, 255 ],
  [ 255, 208, 30, 255 ],
  [ 184, 142, 26, 255 ],
  [ 148, 111, 33, 255 ],
  [ 102, 76, 35, 255 ],
  [ 71, 54, 37, 255 ],
  [ 178, 120, 105, 255 ],
  [ 232, 183, 155, 255 ],
  [ 255, 207, 156, 255 ],
  [ 232, 197, 135, 255 ],
  [ 181, 164, 115, 255 ],
  [ 168, 137, 115, 255 ],
  [ 204, 199, 162, 255 ],
  [ 245, 255, 201, 255 ],
  [ 158, 215, 217, 255 ],
  [ 81, 151, 178, 255 ],
  [ 25, 70, 85, 255 ],
  [ 50, 110, 125, 255 ],
  [ 75, 140, 155, 255 ],
  [ 100, 175, 200, 255 ],
  [ 125, 240, 255, 255 ],
  [ 255, 159, 0, 255 ],
  [ 204, 106, 0, 255 ],
  [ 153, 63, 0, 255 ],
  [ 102, 30, 0, 255 ],
  [ 51, 9, 0, 255 ],
  [ 198, 17, 0, 255 ],
  [ 255, 113, 23, 255 ],
  [ 255, 183, 61, 255 ],
  [ 255, 224, 115, 255 ],
  [ 255, 249, 187, 255 ],
  [ 40, 104, 161, 255 ],
  [ 109, 172, 227, 255 ],
  [ 168, 215, 255, 255 ],
  [ 255, 227, 182, 255 ],
  [ 255, 180, 65, 255 ],
  [ 155, 204, 0, 255 ],
  [ 102, 91, 82, 255 ],
  [ 51, 40, 40, 255 ],
  [ 84, 73, 89, 255 ],
  [ 0, 179, 204, 255 ],
  [ 0, 20, 84, 255 ],
  [ 82, 118, 164, 255 ],
  [ 255, 255, 255, 255 ],
  [ 255, 223, 134, 255 ],
  [ 255, 164, 0, 255 ],
  [ 43, 57, 36, 255 ],
  [ 94, 146, 62, 255 ],
  [ 200, 255, 173, 255 ],
  [ 196, 228, 253, 255 ],
  [ 24, 59, 89, 255 ],
  [ 105, 35, 9, 255 ],
  [ 133, 125, 105, 255 ],
  [ 198, 212, 167, 255 ],
  [ 82, 112, 106, 255 ],
  [ 68, 75, 105, 255 ],
  [ 211, 223, 240, 255 ],
  [ 151, 178, 210, 255 ],
  [ 87, 126, 165, 255 ],
  [ 24, 96, 139, 255 ],
  [ 0, 74, 118, 255 ],
  [ 255, 231, 193, 255 ],
  [ 178, 166, 135, 255 ],
  [ 100, 93, 86, 255 ],
  [ 178, 150, 135, 255 ],
  [ 255, 205, 193, 255 ],
  [ 64, 62, 47, 255 ],
  [ 128, 124, 95, 255 ],
  [ 191, 186, 142, 255 ],
  [ 229, 223, 170, 255 ],
  [ 255, 248, 189, 255 ],
  [ 22, 26, 19, 255 ],
  [ 43, 51, 39, 255 ],
  [ 86, 102, 77, 255 ],
  [ 172, 204, 154, 255 ],
  [ 215, 255, 193, 255 ],
  [ 255, 243, 201, 255 ],
  [ 204, 195, 161, 255 ],
  [ 153, 146, 121, 255 ],
  [ 102, 97, 81, 255 ],
  [ 51, 49, 40, 255 ],
  [ 17, 57, 64, 255 ],
  [ 57, 115, 93, 255 ],
  [ 255, 255, 148, 255 ],
  [ 255, 201, 80, 255 ],
  [ 255, 116, 0, 255 ],
  [ 255, 248, 220, 255 ],
  [ 204, 175, 136, 255 ],
  [ 193, 154, 107, 255 ],
  [ 139, 0, 0, 255 ],
  [ 0, 49, 83, 255 ],
  [ 159, 196, 214, 255 ],
  [ 176, 214, 169, 255 ],
  [ 255, 241, 160, 255 ],
  [ 255, 207, 111, 255 ],
  [ 255, 176, 80, 255 ],
  [ 60, 144, 144, 255 ],
  [ 129, 200, 111, 255 ],
  [ 255, 200, 81, 255 ],
  [ 255, 55, 55, 255 ],
  [ 81, 111, 174, 255 ],
  [ 0, 0, 0, 255 ],
  [ 64, 64, 64, 255 ],
  [ 128, 128, 128, 255 ],
  [ 255, 255, 255, 255 ],
  [ 255, 150, 0, 255 ],
  [ 255, 140, 36, 255 ],
  [ 255, 190, 91, 255 ],
  [ 255, 223, 142, 255 ],
  [ 255, 247, 196, 255 ],
  [ 55, 38, 38, 255 ],
  [ 255, 246, 155, 255 ],
  [ 229, 224, 169, 255 ],
  [ 191, 188, 157, 255 ],
  [ 128, 126, 115, 255 ],
  [ 64, 64, 64, 255 ],
  [ 242, 217, 123, 255 ],
  [ 132, 191, 126, 255 ],
  [ 110, 129, 140, 255 ],
  [ 84, 74, 89, 255 ],
  [ 36, 32, 31, 255 ],
  [ 48, 39, 51, 255 ],
  [ 160, 131, 120, 255 ],
  [ 245, 231, 180, 255 ],
  [ 105, 128, 98, 255 ],
  [ 39, 49, 51, 255 ],
  [ 62, 191, 0, 255 ],
  [ 255, 200, 0, 255 ],
  [ 229, 0, 0, 255 ],
  [ 153, 0, 143, 255 ],
  [ 0, 96, 153, 255 ],
  [ 128, 44, 44, 255 ],
  [ 178, 77, 45, 255 ],
  [ 204, 110, 31, 255 ],
  [ 229, 154, 15, 255 ],
  [ 255, 200, 0, 255 ],
  [ 115, 128, 105, 255 ],
  [ 153, 147, 117, 255 ],
  [ 178, 158, 132, 255 ],
  [ 204, 175, 165, 255 ],
  [ 229, 189, 222, 255 ],
  [ 122, 0, 0, 255 ],
  [ 255, 103, 71, 255 ],
  [ 255, 207, 172, 255 ],
  [ 230, 200, 200, 255 ],
  [ 74, 55, 55, 255 ],
  [ 64, 44, 36, 255 ],
  [ 102, 70, 58, 255 ],
  [ 140, 96, 80, 255 ],
  [ 178, 122, 102, 255 ],
  [ 217, 148, 123, 255 ],
  [ 122, 0, 0, 255 ],
  [ 255, 103, 71, 255 ],
  [ 255, 207, 172, 255 ],
  [ 201, 201, 201, 255 ],
  [ 28, 28, 28, 255 ],
  [ 184, 96, 180, 255 ],
  [ 244, 140, 218, 255 ],
  [ 255, 184, 244, 255 ],
  [ 255, 147, 130, 255 ],
  [ 174, 94, 79, 255 ],
  [ 255, 169, 0, 255 ],
  [ 150, 123, 69, 255 ],
  [ 199, 162, 89, 255 ],
  [ 227, 206, 164, 255 ],
  [ 255, 255, 255, 255 ],
  [ 64, 25, 37, 255 ],
  [ 128, 72, 59, 255 ],
  [ 191, 137, 89, 255 ],
  [ 229, 189, 119, 255 ],
  [ 255, 236, 167, 255 ],
  [ 78, 78, 87, 255 ],
  [ 176, 176, 191, 255 ],
  [ 232, 233, 255, 255 ],
  [ 173, 172, 143, 255 ],
  [ 201, 112, 11, 255 ],
  [ 0, 90, 110, 255 ],
  [ 100, 150, 170, 255 ],
  [ 200, 225, 225, 255 ],
  [ 175, 160, 160, 255 ],
  [ 100, 60, 60, 255 ],
  [ 245, 245, 245, 255 ],
  [ 220, 220, 220, 255 ],
  [ 169, 169, 169, 255 ],
  [ 31, 26, 23, 255 ],
  [ 191, 0, 0, 255 ],
  [ 30, 69, 102, 255 ],
  [ 94, 130, 104, 255 ],
  [ 178, 176, 74, 255 ],
  [ 252, 218, 92, 255 ],
  [ 255, 176, 41, 255 ],
  [ 115, 2, 2, 255 ],
  [ 181, 60, 37, 255 ],
  [ 189, 141, 70, 255 ],
  [ 255, 176, 59, 255 ],
  [ 246, 228, 151, 255 ],
  [ 242, 164, 165, 255 ],
  [ 176, 119, 119, 255 ],
  [ 122, 83, 83, 255 ],
  [ 76, 52, 52, 255 ],
  [ 41, 28, 28, 255 ]
];
// Predefined palettes
const palettes = [
[ [ 33, 24, 48, 255 ], [ 92, 110, 148, 255 ], [ 135, 244, 226, 255 ], [ 255, 253, 151, 255 ], [ 255, 181, 148, 255 ] ], [ [ 213, 224, 95, 255 ], [ 134, 138, 97, 255 ], [ 209, 147, 144, 255 ], [ 173, 75, 69, 255 ], [ 120, 176, 230, 255 ] ], [ [ 106, 120, 184, 255 ], [ 186, 191, 219, 255 ], [ 237, 237, 237, 255 ], [ 219, 211, 186, 255 ], [ 184, 163, 99, 255 ] ], [ [ 35, 41, 37, 255 ], [ 60, 89, 64, 255 ], [ 242, 164, 68, 255 ], [ 166, 53, 28, 255 ], [ 115, 47, 23, 255 ] ], [ [ 18, 82, 255, 255 ], [ 26, 137, 255, 255 ], [ 35, 188, 255, 255 ], [ 44, 235, 255, 255 ], [ 52, 255, 229, 255 ] ], [ [ 255, 208, 30, 255 ], [ 184, 142, 26, 255 ], [ 148, 111, 33, 255 ], [ 102, 76, 35, 255 ], [ 71, 54, 37, 255 ] ], [ [ 178, 120, 105, 255 ], [ 232, 183, 155, 255 ], [ 255, 207, 156, 255 ], [ 232, 197, 135, 255 ], [ 181, 164, 115, 255 ] ], [ [ 168, 137, 115, 255 ], [ 204, 199, 162, 255 ], [ 245, 255, 201, 255 ], [ 158, 215, 217, 255 ], [ 81, 151, 178, 255 ] ], [ [ 25, 70, 85, 255 ], [ 50, 110, 125, 255 ], [ 75, 140, 155, 255 ], [ 100, 175, 200, 255 ], [ 125, 240, 255, 255 ] ], [ [ 255, 159, 0, 255 ], [ 204, 106, 0, 255 ], [ 153, 63, 0, 255 ], [ 102, 30, 0, 255 ], [ 51, 9, 0, 255 ] ], [ [ 198, 17, 0, 255 ], [ 255, 113, 23, 255 ], [ 255, 183, 61, 255 ], [ 255, 224, 115, 255 ], [ 255, 249, 187, 255 ] ], [ [ 40, 104, 161, 255 ], [ 109, 172, 227, 255 ], [ 168, 215, 255, 255 ], [ 255, 227, 182, 255 ], [ 255, 180, 65, 255 ] ], [ [ 155, 204, 0, 255 ], [ 102, 91, 82, 255 ], [ 51, 40, 40, 255 ], [ 84, 73, 89, 255 ], [ 0, 179, 204, 255 ] ], [ [ 0, 20, 84, 255 ], [ 82, 118, 164, 255 ], [ 255, 255, 255, 255 ], [ 255, 223, 134, 255 ], [ 255, 164, 0, 255 ] ], [ [ 43, 57, 36, 255 ], [ 94, 146, 62, 255 ], [ 200, 255, 173, 255 ], [ 196, 228, 253, 255 ], [ 24, 59, 89, 255 ] ], [ [ 105, 35, 9, 255 ], [ 133, 125, 105, 255 ], [ 198, 212, 167, 255 ], [ 82, 112, 106, 255 ], [ 68, 75, 105, 255 ] ], [ [ 211, 223, 240, 255 ], [ 151, 178, 210, 255 ], [ 87, 126, 165, 255 ], [ 24, 96, 139, 255 ], [ 0, 74, 118, 255 ] ], [ [ 255, 231, 193, 255 ], [ 178, 166, 135, 255 ], [ 100, 93, 86, 255 ], [ 178, 150, 135, 255 ], [ 255, 205, 193, 255 ] ], [ [ 64, 62, 47, 255 ], [ 128, 124, 95, 255 ], [ 191, 186, 142, 255 ], [ 229, 223, 170, 255 ], [ 255, 248, 189, 255 ] ], [ [ 22, 26, 19, 255 ], [ 43, 51, 39, 255 ], [ 86, 102, 77, 255 ], [ 172, 204, 154, 255 ], [ 215, 255, 193, 255 ] ], [ [ 255, 243, 201, 255 ], [ 204, 195, 161, 255 ], [ 153, 146, 121, 255 ], [ 102, 97, 81, 255 ], [ 51, 49, 40, 255 ] ], [ [ 17, 57, 64, 255 ], [ 57, 115, 93, 255 ], [ 255, 255, 148, 255 ], [ 255, 201, 80, 255 ], [ 255, 116, 0, 255 ] ], [ [ 255, 248, 220, 255 ], [ 204, 175, 136, 255 ], [ 193, 154, 107, 255 ], [ 139, 0, 0, 255 ], [ 0, 49, 83, 255 ] ], [ [ 159, 196, 214, 255 ], [ 176, 214, 169, 255 ], [ 255, 241, 160, 255 ], [ 255, 207, 111, 255 ], [ 255, 176, 80, 255 ] ], [ [ 60, 144, 144, 255 ], [ 129, 200, 111, 255 ], [ 255, 200, 81, 255 ], [ 255, 55, 55, 255 ], [ 81, 111, 174, 255 ] ], [ [ 0, 0, 0, 255 ], [ 64, 64, 64, 255 ], [ 128, 128, 128, 255 ], [ 255, 255, 255, 255 ], [ 255, 150, 0, 255 ] ], [ [ 255, 140, 36, 255 ], [ 255, 190, 91, 255 ], [ 255, 223, 142, 255 ], [ 255, 247, 196, 255 ], [ 55, 38, 38, 255 ] ], [ [ 255, 246, 155, 255 ], [ 229, 224, 169, 255 ], [ 191, 188, 157, 255 ], [ 128, 126, 115, 255 ], [ 64, 64, 64, 255 ] ], [ [ 242, 217, 123, 255 ], [ 132, 191, 126, 255 ], [ 110, 129, 140, 255 ], [ 84, 74, 89, 255 ], [ 36, 32, 31, 255 ] ], [ [ 48, 39, 51, 255 ], [ 160, 131, 120, 255 ], [ 245, 231, 180, 255 ], [ 105, 128, 98, 255 ], [ 39, 49, 51, 255 ] ], [ [ 62, 191, 0, 255 ], [ 255, 200, 0, 255 ], [ 229, 0, 0, 255 ], [ 153, 0, 143, 255 ], [ 0, 96, 153, 255 ] ], [ [ 128, 44, 44, 255 ], [ 178, 77, 45, 255 ], [ 204, 110, 31, 255 ], [ 229, 154, 15, 255 ], [ 255, 200, 0, 255 ] ], [ [ 115, 128, 105, 255 ], [ 153, 147, 117, 255 ], [ 178, 158, 132, 255 ], [ 204, 175, 165, 255 ], [ 229, 189, 222, 255 ] ], [ [ 122, 0, 0, 255 ], [ 255, 103, 71, 255 ], [ 255, 207, 172, 255 ], [ 230, 200, 200, 255 ], [ 74, 55, 55, 255 ] ], [ [ 64, 44, 36, 255 ], [ 102, 70, 58, 255 ], [ 140, 96, 80, 255 ], [ 178, 122, 102, 255 ], [ 217, 148, 123, 255 ] ], [ [ 122, 0, 0, 255 ], [ 255, 103, 71, 255 ], [ 255, 207, 172, 255 ], [ 201, 201, 201, 255 ], [ 28, 28, 28, 255 ] ], [ [ 184, 96, 180, 255 ], [ 244, 140, 218, 255 ], [ 255, 184, 244, 255 ], [ 255, 147, 130, 255 ], [ 174, 94, 79, 255 ] ], [ [ 255, 169, 0, 255 ], [ 150, 123, 69, 255 ], [ 199, 162, 89, 255 ], [ 227, 206, 164, 255 ], [ 255, 255, 255, 255 ] ], [ [ 64, 25, 37, 255 ], [ 128, 72, 59, 255 ], [ 191, 137, 89, 255 ], [ 229, 189, 119, 255 ], [ 255, 236, 167, 255 ] ], [ [ 78, 78, 87, 255 ], [ 176, 176, 191, 255 ], [ 232, 233, 255, 255 ], [ 173, 172, 143, 255 ], [ 201, 112, 11, 255 ] ], [ [ 0, 90, 110, 255 ], [ 100, 150, 170, 255 ], [ 200, 225, 225, 255 ], [ 175, 160, 160, 255 ], [ 100, 60, 60, 255 ] ], [ [ 245, 245, 245, 255 ], [ 220, 220, 220, 255 ], [ 169, 169, 169, 255 ], [ 31, 26, 23, 255 ], [ 191, 0, 0, 255 ] ], [ [ 30, 69, 102, 255 ], [ 94, 130, 104, 255 ], [ 178, 176, 74, 255 ], [ 252, 218, 92, 255 ], [ 255, 176, 41, 255 ] ], [ [ 115, 2, 2, 255 ], [ 181, 60, 37, 255 ], [ 189, 141, 70, 255 ], [ 255, 176, 59, 255 ], [ 246, 228, 151, 255 ] ], [ [ 242, 164, 165, 255 ], [ 176, 119, 119, 255 ], [ 122, 83, 83, 255 ], [ 76, 52, 52, 255 ], [ 41, 28, 28, 255 ] ]
];

let currentColors = [];
let bgColors = [];

function setup() {
    let canvas = createCanvas(600, 600, WEBGL);
    canvas.parent('canvas-container');

    // Set orthographic projection
    ortho(-width/2, width/2, -height/2, height/2, 0, 2000);

    // Initialize grids and rotations
    initGrids();
    initRotationAngles();
    setupControls();
    updateColors();
    randomizeGrid();

    // Set WEBGL settings
    angleMode(DEGREES);
}

function draw() {
    background(255);

    // Calculate camera zoom for hairline strokes
    calculateCameraZoom();

    // Set stroke weight based on zoom (hairline effect)
    let strokeWeightValue = 1 / cameraZoom;
    strokeWeight(strokeWeightValue);
    stroke(0);

    // Set camera position
    if (shouldAnimate) {
        orbitControl();
    } else {
        camera(...cameraState.position, ...cameraState.center, ...cameraState.up);
    }

    // Lighting
    ambientLight(60);
    pointLight(255, 255, 255, -200, -200, 200);

    // Position the grid
    let totalSize = cols * (cellSize + gapSize) - gapSize;
    translate(-totalSize/2, -totalSize/2, 0);

    // Update simulation at controlled speed
    if (isPlaying && frameCount % (31 - speed) === 0) {
        updateGrid();
    }

    // Draw the 3D grid
    for (let i = 0; i < cols; i++) {
        for (let j = 0; j < rows; j++) {
            push();
            translate(i*(cellSize+gapSize)+cellSize/2, j*(cellSize+gapSize)+cellSize/2, 0);

            if (shouldAnimate) {
                rotateX(rotationAngles[i][j].x);
                rotateY(rotationAngles[i][j].y);
                rotateZ(rotationAngles[i][j].z);

                // Update rotation angles
                rotationAngles[i][j].x += 0.5;
                rotationAngles[i][j].y += 0.7;
                rotationAngles[i][j].z += 0.3;
            }

            if (grid[i][j] === 1) {
                // Draw live cell (cube)
                if (colorMode === 'pair') {
                    fill(currentColors[0]);
                } else if (colorMode === 'palette') {
                    fill(currentColors[(i + j) % currentColors.length]);
                } else { // random
                    fill(255, 255, 255, 200);
                }
                box(cellSize);
            } else {
                // Draw dead cell (transparent cube)
                if (colorMode === 'random') {
                    fill(bgColors[i][j]);
                } else {
                    fill(100, 100, 100, 50);
                }
                box(cellSize);
            }
            pop();
        }
    }

    frameCount++;
}

function calculateCameraZoom() {
    // Calculate approximate camera zoom for hairline stroke adjustment
    // This is a simplified calculation - you might need to adjust based on your exact camera setup
    if (shouldAnimate) {
        // When orbiting, we need to estimate the zoom level
        // This is an approximation - you might need a more precise method
        let camDistance = dist(0, 0, 0, cameraX, cameraY, cameraZ);
        cameraZoom = camDistance / 800; // 800 is our default camera distance
    } else {
        // In orthographic mode, zoom is constant
        cameraZoom = 1;
    }

    // Ensure minimum stroke weight
    cameraZoom = max(cameraZoom, 0.1);
}

function initGrids() {
    for (let i = 0; i < cols; i++) {
        grid[i] = [];
        nextGrid[i] = [];
        for (let j = 0; j < rows; j++) {
            grid[i][j] = 0;
            nextGrid[i][j] = 0;
        }
    }
}

function initRotationAngles() {
    rotationAngles = [];
    for (let i = 0; i < cols; i++) {
        rotationAngles[i] = [];
        for (let j = 0; j < rows; j++) {
            rotationAngles[i][j] = {
                x: random(360),
                y: random(360),
                z: random(360)
            };
        }
    }
}

function setupControls() {
    document.getElementById('speed').addEventListener('input', function() {
        speed = parseInt(this.value);
    });

    document.getElementById('colorMode').addEventListener('change', function() {
        colorMode = this.value;
        updateColors();
    });

    document.getElementById('randomize').addEventListener('click', function() {
        randomizeGrid();
        if (shouldAnimate) {
            initRotationAngles();
        }
    });

    document.getElementById('save').addEventListener('click', function() {
        saveCanvas('3d-conway', 'png');
    });

    document.getElementById('playPause').addEventListener('click', function() {
        isPlaying = !isPlaying;
        this.textContent = isPlaying ? 'Pause' : 'Play';
    });

    document.getElementById('resetView').addEventListener('click', function() {
        gapSize = 0;
        shouldAnimate = false;
        shouldAnimate.checked = false;
        resetCamera();
    });

    document.getElementById('animate').addEventListener('change', function() {
        shouldAnimate = this.checked;
        gapSize = 10;
        if (!shouldAnimate) {
            resetCamera();
        }
    });
}

function resetCamera() {
    cameraState.position = [0, 0, 800];
    cameraState.center = [0, 0, 0];
    cameraState.up = [0, 1, 0];
    cameraZoom = 1; // Reset zoom calculation
}

function updateGrid() {
    // Compute next generation
    for (let i = 0; i < cols; i++) {
        for (let j = 0; j < rows; j++) {
            let state = grid[i][j];
            let neighbors = countNeighbors(i, j);

            // Apply Conway's rules
            if (state === 0 && neighbors === 3) {
                nextGrid[i][j] = 1;
            } else if (state === 1 && (neighbors < 2 || neighbors > 3)) {
                nextGrid[i][j] = 0;
            } else {
                nextGrid[i][j] = state;
            }
        }
    }

    // Swap grids
    [grid, nextGrid] = [nextGrid, grid];
}

function countNeighbors(x, y) {
    let sum = 0;
    for (let i = -1; i < 2; i++) {
        for (let j = -1; j < 2; j++) {
            // Wrap around edges
            let col = (x + i + cols) % cols;
            let row = (y + j + rows) % rows;

            sum += grid[col][row];
        }
    }
    sum -= grid[x][y]; // Subtract self
    return sum;
}

function randomizeGrid() {
    for (let i = 0; i < cols; i++) {
        for (let j = 0; j < rows; j++) {
            grid[i][j] = random() > 0.7 ? 1 : 0;
        }
    }
    updateColors();
}

function updateColors() {
    if (colorMode === 'pair') {
        // Select 2 random colors from dataset
        shuffleArray(colorDataset);
        currentColors = [colorDataset[0], colorDataset[1]];
    } else if (colorMode === 'palette') {
        // Select a random palette
        currentColors = random(palettes);
    } else { // random
        // Generate random colors for all cells
        bgColors = [];
        for (let i = 0; i < cols; i++) {
            bgColors[i] = [];
            for (let j = 0; j < rows; j++) {
                shuffleArray(colorDataset);
                bgColors[i][j] = colorDataset[0];
            }
        }
    }
}

// Helper function to shuffle an array
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}
